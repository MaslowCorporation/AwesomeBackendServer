{
  "question": "Add the following fixes to this code:\n\nimport { verbose as sqlite3Verbose } from 'sqlite3';\n\n// Initialise database\nexport async function InitDatabase({ tableName, columns }) {\n  // Removed await from calling sync function sqlite3Verbose.Database\n  let db = new sqlite3Verbose.Database('./db.sqlite3', (err) => {\n    if (err) {\n        return console.error(err.message);\n    }\n    console.log('Connected to the sqlite3 database.');\n  });\n\n  let columnsQuery = columns.map(column => `${column.name} ${column.type}`).join(', ');\n  db.run(`CREATE TABLE IF NOT EXISTS ${tableName} (${columnsQuery})`);\n\n  return db;\n}\n\n// Create a document\nexport async function CreateDatabaseDocument({ db, tableName, documentData, uniqueId }) {\n  // Check for valid uniqueId\n  if (!uniqueId) {\n    console.log('You gave an invalid uniqueId');\n    return;\n  }\n  try {\n    let keys = Object.keys(documentData);\n    let values = Object.values(documentData);\n\n    keys.push('uniqueId');\n    values.push(uniqueId);\n\n    let statement = await db.prepare(`INSERT INTO ${tableName}(${keys.join(', ')}) VALUES(${new Array(keys.length).fill('?').join(', ')})`);\n    await statement.run(values);\n\n    return uniqueId;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\n// Read a document by uniqueId\nexport async function GetDatabaseDocument({ db, tableName, uniqueId }) {\n  // Check for valid uniqueId\n  if (!uniqueId) {\n    console.log('You gave an invalid uniqueId');\n    return;\n  }\n\n  try {\n    let statement = await db.get(`SELECT * FROM ${tableName} WHERE uniqueId = ?`, uniqueId);\n\n    return statement;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\n// Update a document by uniqueId\nexport async function UpdateDatabaseDocument({ db, tableName, updateData, uniqueId }) {\n  // Check for valid uniqueId\n  if (!uniqueId) {\n    console.log('You gave an invalid uniqueId');\n    return;\n  }\n\n  try {\n    let setQuery = Object.keys(updateData).map(key => `${key} = ?`).join(', ');\n\n    let statement = await db.prepare(`UPDATE ${tableName} SET ${setQuery} WHERE uniqueId = ?`);\n    await statement.run([...Object.values(updateData), uniqueId]);\n\n    return true;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\n// Delete a document by uniqueId\nexport async function DeleteDatabaseDocument({ db, tableName, uniqueId }) {\n  // Check for valid uniqueId\n  if (!uniqueId) {\n    console.log('You gave an invalid uniqueId');\n    return;\n  }\n  \n  try {\n    let statement = await db.prepare(`DELETE FROM ${tableName} WHERE uniqueId = ?`);\n    await statement.run(uniqueId);\n\n    return true;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\n\nGive me methods GetAllDatabaseDocuments, DeleteAllDatabaseDocuments",
  "questionPath": "C:\\Users\\Shadow\\Desktop\\MaslowWorld\\maslow-gpt-api-v2\\src\\services\\LocalDatabase\\question.txt",
  "answer": {
    "codePart": "// Get all documents\nexport async function GetAllDatabaseDocuments({ db, tableName }) {\n  try {\n    let statement = await db.all(`SELECT * FROM ${tableName}`);\n    return statement;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\n// Delete all documents\nexport async function DeleteAllDatabaseDocuments({ db, tableName }) {\n  try {\n    let statement = await db.run(`DELETE FROM ${tableName}`);\n    return true;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n",
    "answer": "Here are the methods to get all the database documents and to delete all database documents:\n\n```javascript\n// Get all documents\nexport async function GetAllDatabaseDocuments({ db, tableName }) {\n  try {\n    let statement = await db.all(`SELECT * FROM ${tableName}`);\n    return statement;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\n// Delete all documents\nexport async function DeleteAllDatabaseDocuments({ db, tableName }) {\n  try {\n    let statement = await db.run(`DELETE FROM ${tableName}`);\n    return true;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n```\n\nThe `GetAllDatabaseDocuments` function retrieves all records from the given table. The `DeleteAllDatabaseDocuments` function removes all records from the given table. It returns true on successful execution. In both cases, errors are logged to the console and the functions return null if an error occurs."
  },
  "answerPath": "C:\\Users\\Shadow\\Desktop\\MaslowWorld\\maslow-gpt-api-v2\\src\\services\\LocalDatabase\\LocalDatabase.js"
}